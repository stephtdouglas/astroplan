# We set the language to c because python isn't supported on the MacOS X nodes
# on Travis. However, the language ends up being irrelevant anyway, since we
# install Python ourselves using conda.
language: c

os:
    - linux

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false

# The apt packages below are needed for sphinx builds, which can no longer
# be installed with sudo apt-get.
addons:
    apt:
        packages:
            - graphviz
            - texlive-latex-extra
            - dvipng
env:
    global:
        # Set defaults to avoid repeating in most cases
        - NUMPY_VERSION=1.10
        - ASTROPY_VERSION=1.0
        - MAIN_CMD='python setup.py'
        - CONDA_DEPENDENCIES='pytz'
        - PIP_DEPENDENCIES=''

    matrix:
        - PYTHON_VERSION=2.7 SETUP_CMD='egg_info'
        - PYTHON_VERSION=3.3 SETUP_CMD='egg_info'
        - PYTHON_VERSION=3.4 SETUP_CMD='egg_info'
        - PYTHON_VERSION=3.5 SETUP_CMD='egg_info'

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:

        # Try MacOS X
        - os: osx
          env: PYTHON_VERSION=2.7 SETUP_CMD='test -V'
               CONDA_DEPENDENCIES='pytz matplotlib nose'
               PIP_DEPENDENCIES='pyephem pytest-mpl'

        # Check for sphinx doc build warnings - we do this first because it
        # runs for a long time. All dependencies are needed because the
        # plot_directive in sphinx needs them
        - os: linux
          env: PYTHON_VERSION=2.7 SETUP_CMD='build_sphinx -w'
               CONDA_DEPENDENCIES='pytz matplotlib nose'
               PIP_DEPENDENCIES='pyephem pytest-mpl wcsaxes astroquery'
        - os: linux
          env: PYTHON_VERSION=3.5 SETUP_CMD='build_sphinx -w'
               CONDA_DEPENDENCIES='pytz matplotlib nose'
               PIP_DEPENDENCIES='pyephem pytest-mpl wcsaxes astroquery'

        # Try all python versions with the latest numpy
        # TODO: add the `--open-files` option back once this issue has been resolved:
        # https://github.com/astropy/astroplan/pull/83#issuecomment-136129489
        - os: linux
          env: PYTHON_VERSION=2.7 SETUP_CMD='test -V'

        # There isn't numpy 1.10 and python 3.3 combination in conda or
        # astropy-ci-extras.
        - os: linux
          env: PYTHON_VERSION=3.3 SETUP_CMD='test -V'
               NUMPY_VERSION=1.9
        - os: linux
          env: PYTHON_VERSION=3.4 SETUP_CMD='test -V'
        - os: linux
          env: PYTHON_VERSION=3.5 SETUP_CMD='test -V'

        # Try running tests from an installed version via the `astroplan.test()` function
        # Because of the way this travis config file is written this is a bit cryptic.
        # - $MAIN_CMD is used to trigger this case in the install section below
        # - $SETUP_CMD is used to communicate which dependencies should be installed
        - os: linux
          env: PYTHON_VERSION=3.4 $MAIN_CMD='test installed'

        # Now try with all optional dependencies on 2.7 and an appropriate 3.x
        # build (with latest numpy). We also note the code coverage on Python
        # 2.7.
        - os: linux
          env: PYTHON_VERSION=2.7 SETUP_CMD='test --remote-data -V --coverage'
               CONDA_DEPENDENCIES='pytz matplotlib nose'
               PIP_DEPENDENCIES='pyephem pytest-mpl'
        - os: linux
          env: PYTHON_VERSION=3.5 SETUP_CMD='test --remote-data -V'
               CONDA_DEPENDENCIES='pytz matplotlib nose'
               PIP_DEPENDENCIES='pyephem pytest-mpl'

        # Try older numpy versions
        - os: linux
          env: PYTHON_VERSION=2.7 NUMPY_VERSION=1.9 SETUP_CMD='test -V'
        - os: linux
          env: PYTHON_VERSION=2.7 NUMPY_VERSION=1.8 SETUP_CMD='test -V'
        - os: linux
          env: PYTHON_VERSION=2.7 NUMPY_VERSION=1.7 SETUP_CMD='test -V'
        - os: linux
          env: PYTHON_VERSION=2.7 NUMPY_VERSION=1.6 SETUP_CMD='test -V'

        # Try developer version of Numpy
        - os: linux
          env: PYTHON_VERSION=2.7 NUMPY_VERSION=dev SETUP_CMD='test -V'

        # Try developer version of Astropy
        - os: linux
          env: PYTHON_VERSION=2.7 ASTROPY_VERSION=dev SETUP_CMD='test -V'

        # Do a PEP8 test
        - os: linux
          env: PYTHON_VERSION=2.7 MAIN_CMD='pep8 astroplan --count' SETUP_CMD=''

    allow_failures:
      - env: PYTHON_VERSION=2.7 NUMPY_VERSION=dev SETUP_CMD='test -V'
      # TODO: these fail for now ... make them work!
      - env: PYTHON_VERSION=2.7 MAIN_CMD='pep8 astroplan --count' SETUP_CMD=''
      - env: PYTHON_VERSION=2.7 NUMPY_VERSION=1.8 SETUP_CMD='test -V'
      - env: PYTHON_VERSION=2.7 NUMPY_VERSION=1.7 SETUP_CMD='test -V'
      - env: PYTHON_VERSION=2.7 NUMPY_VERSION=1.6 SETUP_CMD='test -V'

install:
    - git clone git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda_$TRAVIS_OS_NAME.sh

    # This is needed to make matplotlib plot testing work
    - if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
          export DISPLAY=:99.0;
          sh -e /etc/init.d/xvfb start;
          export QT_API=pyqt;
      fi

script:
    # Check if install and testing via `astroplan.test()` works, otherwise
    # run tests the usual way
    - if [[ $MAIN_CMD == 'test installed' ]]; then
        python setup.py install;
        cd /tmp;
        python -c 'import astroplan; import sys; sys.exit(astroplan.test())';
      else
        $MAIN_CMD $SETUP_CMD;
      fi

after_success:
    - if [[ $SETUP_CMD == 'test --remote-data -V --coverage' ]]; then
        coveralls --rcfile='astroplan/tests/coveragerc';
      fi
